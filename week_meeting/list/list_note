1.首先创建一个结构体，此结构体是用来链接各个节点的

struct list_head {
	struct list_head *next, *prev;

}

struct score
{
	int id;
	char name[NAMESIZE];
	int math;
	struct list_head node;
}

2.头节点的创建
#define LIST_HEAD_INIT(name) { &(name), &(name)}
#define LIST_HEAD(name) struct list_head name = LIST_HEAD_INIT(name)

LIST_HEAD(head)    --->  struct list_head head = {
					head,&head
					}



3.添加节点

static inline void __list_add(struct list_head *new,struct list_head *prev, struct list_head *next)
{
	next->prev = new;
	new->next = next;
	new->prev = prev; 
	prev->next = new;   
}

头部插入:

static inline void list_add(struct list_head *new, struct list_head *head)
{
    __list_add(new, head, head->next);
}


尾部插入：
static inline void list_add_tail(struct list_head *new, struct list_head *head)
{
    __list_add(new, head->prev, head);
}


4.遍历节点 
#define __list_for_each(pos, head) for(pos = (head)->next; pos != (head);pos = pos->next)                                          

只是一个for循环


5.定位节点指针的数值
#define offsetof(TYPE, MEMBER) ((size_t) &((TYPE *)0)->MEMBER)

#define container_of(ptr, type, member) ({(type *)((char *)ptr - offsetof(type,member));}) 

#define list_entry(ptr, type, member) container_of(ptr, type, member)

6.删除节点

static inline void __list_del(struct list_head * prev, struct list_head * next)
{
    next->prev = prev;
    prev->next = next;
}

static inline void __list_del_entry(struct list_head *entry)
{
   __list_del(entry->prev, entry->next);
}

static inline void list_del(struct list_head *entry)
{
    __list_del(entry->prev, entry->next);
    entry->next = LIST_POISON1;
    entry->prev = LIST_POISON2;
}


7.查询节点
	遍历的同时作个判断则可以实现。




